{
  "language": "Solidity",
  "sources": {
    "src/IncentivePool.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./IncentivePoolStorage.sol\";\nimport \"./common/token/IERC20.sol\";\n\ncontract IncentivePool is IncentivePoolStorage {\n    modifier nonReentrant() {\n        require(_notEntered, \"ALREADY_ENTERED\");\n        _notEntered = false;\n        _;\n        _notEntered = true; // get a gas-refund post-Istanbul\n    }\n\n    constructor(DeployIncentivePoolReq memory req) {\n        IncentiveInfo memory info = req.incentiveInfo;\n\n        factory = msg.sender;\n        poolAdmin = req.deployer;\n        incentiveInfo = info;\n\n        isClaimPaused = false;\n        isUpdatePaused = false;\n\n        _notEntered = true;\n    }\n\n    function getIncentiveInfo() external view returns (IncentiveInfo memory) {\n        return incentiveInfo;\n    }\n\n    function getAffiliates() external view returns (address[] memory) {\n        uint len = affiliates.length;\n        address[] memory result = new address[](len);\n\n        for (uint i = 0; i < len; i += 1) {\n            address deployer = address(affiliates[i]);\n            result[i] = deployer;\n        }\n\n        return result;\n    }\n\n    function getUsers() external view returns (address[] memory) {\n        uint len = users.length;\n        address[] memory result = new address[](len);\n\n        for (uint i = 0; i < len; i += 1) {\n            address deployer = address(users[i]);\n            result[i] = deployer;\n        }\n\n        return result;\n    }\n\n    function addLeftTransactionNum(uint256 addedTransactionNum) external {\n        require(msg.sender == factory || msg.sender == poolAdmin, \"ACCESS_DENIED\");\n\n        uint256 addedIncentiveAmount = addedTransactionNum * incentiveInfo.incentiveAmountPerTransaction;\n        IERC20(incentiveInfo.incentiveToken).transferFrom(msg.sender, address(this), addedIncentiveAmount);\n\n        // msg.sender가 factory인 경우, 생성자에서 leftTransactionNum을 설정\n        if (msg.sender != factory) {\n            incentiveInfo.leftTransactionNum += addedTransactionNum;\n        }\n\n        emit AddLeftTransactionNum(addedTransactionNum, incentiveInfo.leftTransactionNum, addedIncentiveAmount);\n    }\n\n    function updatePool(Referral[] memory referrals) external {\n        require(isUpdatePaused == false, \"CLAIM_PAUSED\");\n        require(msg.sender == factory, \"ACCESS_DENIED\");\n\n        for (uint256 i = 0; i < referrals.length; i++) {\n            address affiliate = referrals[i].affiliate;\n            address user = referrals[i].user;\n\n            // 추천인 정보 업데이트\n            ConnectedUserData storage userData = affiliateToLeftTransactionNum[affiliate];\n\n            bool isRegisteredUser = isAffiliateUserRelated[affiliate][user];\n            if (!isRegisteredUser) {\n                isAffiliateUserRelated[affiliate][user] = true;\n                userData.users.push(user);\n            }\n\n            userData.leftTransactionNum++;\n\n            // 사용자 정보 업데이트\n            userToLeftTransactionNum[user]++;\n\n            // 전체 풀 정보 업데이트\n            if (!isAffiliateExist[affiliate]) {\n                isAffiliateExist[affiliate] = true;\n                affiliates.push(affiliate);\n            }\n            if (!isUserExist[user]) {\n                isUserExist[user] = true;\n                users.push(user);\n            }\n        }\n    }\n\n    function claimAffiliateIncentive() external nonReentrant {\n        require(isClaimPaused == false, \"CLAIM_PAUSED\");\n\n        ConnectedUserData storage userData = affiliateToLeftTransactionNum[msg.sender];\n        uint256 claimTransactionNum = userData.leftTransactionNum;\n\n        userData.leftTransactionNum = 0;\n        affiliateToClaimedTransactionNum[msg.sender] += claimTransactionNum;\n\n        require(claimTransactionNum > 0, \"NO_TRANSACTION\");\n\n        uint256 claimValue = claimTransactionNum * incentiveInfo.affiliateAmountPerTransaction;\n        IERC20(incentiveInfo.incentiveToken).transfer(msg.sender, claimValue);\n\n        emit ClaimIncentive(msg.sender, ClaimType.AFFILIATE, claimTransactionNum, claimValue);\n    }\n\n    function claimUserIncentive() external nonReentrant {\n        require(isClaimPaused == false, \"CLAIM_PAUSED\");\n\n        uint256 claimTransactionNum = userToLeftTransactionNum[msg.sender];\n        require(claimTransactionNum > 0, \"NO_TRANSACTION\");\n\n        userToLeftTransactionNum[msg.sender] = 0;\n        userToClaimedTransactionNum[msg.sender] += claimTransactionNum;\n\n        uint256 claimValue = claimTransactionNum * incentiveInfo.userAmountPerTransaction;\n        IERC20(incentiveInfo.incentiveToken).transfer(msg.sender, claimValue);\n\n        emit ClaimIncentive(msg.sender, ClaimType.USER, claimTransactionNum, claimValue);\n    }\n}\n"
    },
    "src/IncentivePoolStorage.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./interface/IncentivePoolInterface.sol\";\n\nabstract contract IncentivePoolStorage is IncentivePoolInterface {\n    /// @notice IncentivePoolFactory 컨트랙트 주소\n    address public factory;\n\n    /// @notice 풀 관리자 주소\n    address public poolAdmin;\n\n    /// @notice 해당 풀의 전체 추천인 목록\n    address[] public affiliates;\n\n    /// @notice 해당 풀의 추천인 등록 여부\n    mapping(address => bool) public isAffiliateExist;\n\n    /// @notice 해당 풀의 전체 사용자 목록\n    address[] public users;\n\n    /// @notice 해당 풀의 추천인 등록 여부\n    mapping(address => bool) public isUserExist;\n\n    /// @notice 인센티브 관련 데이터\n    IncentiveInfo public incentiveInfo;\n\n    mapping(address => mapping(address => bool)) isAffiliateUserRelated; // 헤당 추천인의 링크에 등록된 사용자인지 체크)\n\n    mapping(address => ConnectedUserData) public affiliateToLeftTransactionNum;\n\n    mapping(address => uint256) public userToLeftTransactionNum;\n\n    mapping(address => uint256) public affiliateToClaimedTransactionNum;\n\n    mapping(address => uint256) public userToClaimedTransactionNum;\n\n    bool public isClaimPaused;\n\n    bool public isUpdatePaused;\n\n    ///  @dev Guard variable for re-entrancy checks\n    bool internal _notEntered;\n}\n"
    },
    "src/common/token/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.11;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "src/interface/IncentivePoolInterface.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./CommonDtos.sol\";\n\ninterface IncentivePoolInterface is CommonDtos {\n    enum ClaimType {\n        AFFILIATE,\n        USER\n    }\n\n    function getIncentiveInfo() external view returns (IncentiveInfo memory);\n\n    function affiliateToLeftTransactionNum(address affiliate) external view returns (uint256);\n\n    function userToLeftTransactionNum(address user) external view returns (uint256);\n\n    function affiliateToClaimedTransactionNum(address affiliate) external view returns (uint256);\n\n    function userToClaimedTransactionNum(address user) external view returns (uint256);\n\n    /// @notice Emitted when leftTransactionNum is added\n    event AddLeftTransactionNum(uint256 addedTransactionNum, uint256 totalTransactionNum, uint256 addedIncentiveAmount);\n\n    /// @notice Emitted when affiliate claim the incentive\n    event ClaimIncentive(\n        address indexed caller,\n        ClaimType indexed claimType,\n        uint256 claimTransactionNum,\n        uint256 claimedValue\n    );\n}\n"
    },
    "src/interface/CommonDtos.sol": {
      "content": "pragma solidity ^0.8.11;\n\ninterface CommonDtos {\n    struct IncentiveInfo {\n        address incentiveToken;\n        uint256 incentiveAmountPerTransaction;\n        uint256 affiliateAmountPerTransaction;\n        uint256 userAmountPerTransaction;\n        uint256 leftTransactionNum;\n        uint256 maxTransactionNumPerWallet;\n        uint256 endTimeStamp;\n    }\n\n    struct CreateIncentivePoolReq {\n        IncentiveInfo incentiveInfo;\n    }\n\n    struct DeployIncentivePoolReq {\n        address deployer;\n        IncentiveInfo incentiveInfo;\n    }\n\n    struct ConnectedUserData {\n        address[] users; // 사용자 지갑 주소\n        uint256 leftTransactionNum; // 추천인이 보상을 받을 수 있는 (남아있는) TX 합\n    }\n\n    struct Referral {\n        address affiliate;\n        address user;\n    }\n\n    struct PoolUpdateInfo {\n        address incentivePoolAddress;\n        Referral[] referrals;\n    }\n\n    struct UpdateIncentivePoolsReq {\n        PoolUpdateInfo[] info;\n    }\n\n    struct ProductInfo {\n        address incentivePoolAddress;\n        uint256 affiliateEarned;\n        uint256 affiliateClaimed;\n        uint256 userEarned;\n        uint256 userClaimed;\n    }\n\n    struct GetUserDashboardDataRes {\n        uint256 totalEarned;\n        uint256 totalClaimed;\n        uint256 productNum;\n        uint256 totalTransactionNum;\n        ProductInfo[] productInfos;\n    }\n}\n"
    },
    "src/IncentivePoolView.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./common/upgradeable/Initializable.sol\";\nimport \"./interface/IncentivePoolFactoryInterface.sol\";\nimport \"./IncentivePool.sol\";\n\ncontract IncentivePoolView is Initializable {\n    /// @notice IncentivePoolFactory 컨트랙트 주소\n    address public factory;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address factory_) public initializer {\n        factory = factory_;\n    }\n}\n"
    },
    "src/common/upgradeable/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"./AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) ||\n                (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "src/interface/IncentivePoolFactoryInterface.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./CommonDtos.sol\";\n\ninterface IncentivePoolFactoryInterface is CommonDtos {\n    /// @notice Emitted when leftTransactionNum is added\n    event CreateIncentivePool(address caller, address poolAddress, uint256 initialAmount);\n}\n"
    },
    "src/common/upgradeable/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.10;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\n// Subject to the MIT license.\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/IncentivePoolFactory.sol": {
      "content": "pragma solidity ^0.8.11;\n\nimport \"./common/upgradeable/Initializable.sol\";\nimport \"./interface/IncentivePoolFactoryInterface.sol\";\nimport \"./IncentivePool.sol\";\nimport \"./interface/IncentivePoolInterface.sol\";\nimport \"./common/token/IERC20.sol\";\n\ncontract IncentivePoolFactory is IncentivePoolFactoryInterface, Initializable {\n    ///  @notice List of product incentive pools\n    IncentivePool[] public incentivePools;\n\n    ///  @notice Mapping of pool address to validness(is it deployed?)\n    mapping(address => bool) public isValidPool;\n\n    ///  @notice Mapping of deployer address to pool address\n    mapping(address => address) public deployerToIncentivePool;\n\n    ///  @notice Pool creation fee paid by contract\n    ///  @dev Should be multiplied by unit of ether(1e18)\n    uint256 public poolCreationFee;\n\n    ///  @notice Address of the master admin of split\n    address public masterAdmin;\n\n    ///  @notice Addresses of the deployers\n    address[] public deployers;\n\n    ///  @dev Guard variable for re-entrancy checks\n    bool internal _notEntered;\n\n    modifier nonReentrant() {\n        require(_notEntered, \"ALREADY_ENTERED\");\n        _notEntered = false;\n        _;\n        _notEntered = true; // get a gas-refund post-Istanbul\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address masterAdmin_, uint256 poolCreationFee_) public initializer {\n        masterAdmin = masterAdmin_;\n        poolCreationFee = poolCreationFee_;\n\n        _notEntered = true;\n    }\n\n    function getIncentivePoolAddresses() external view returns (address[] memory) {\n        uint len = incentivePools.length;\n        address[] memory result = new address[](len);\n\n        for (uint i = 0; i < len; i += 1) {\n            address incentivePool = address(incentivePools[i]);\n            result[i] = incentivePool;\n        }\n\n        return result;\n    }\n\n    function getDeployers() external view returns (address[] memory) {\n        uint len = deployers.length;\n        address[] memory result = new address[](len);\n\n        for (uint i = 0; i < len; i += 1) {\n            address deployer = address(deployers[i]);\n            result[i] = deployer;\n        }\n\n        return result;\n    }\n\n    struct GetUserDashboardLocalVars {\n        uint256 affilateLeftTransaction;\n        uint256 affilateClaimedTransaction;\n        uint256 userLeftTransaction;\n        uint256 userClaimedTransaction;\n        uint256 affiliateAmountPerTransaction;\n        uint256 userAmountPerTransaction;\n        uint256 affiliateClaimed;\n        uint256 userClaimed;\n        uint256 claimed;\n        uint256 affiliateEarned;\n        uint256 userEarned;\n        uint256 earned;\n        uint256 transactionNum;\n    }\n\n    function getUserDashboardData(address walletAddr) external view returns (GetUserDashboardDataRes memory res) {\n        GetUserDashboardLocalVars memory vars;\n\n        res.totalClaimed = 0;\n        res.totalEarned = 0;\n        res.productNum = 0;\n        res.totalTransactionNum = 0;\n        res.productInfos = new ProductInfo[](incentivePools.length);\n\n        for (uint256 i = 0; i < incentivePools.length; i++) {\n            IncentivePoolInterface incentivePool = incentivePools[i];\n\n            vars.affilateLeftTransaction = incentivePool.affiliateToLeftTransactionNum(walletAddr);\n            vars.affilateClaimedTransaction = incentivePool.affiliateToClaimedTransactionNum(walletAddr);\n            vars.userLeftTransaction = incentivePool.userToLeftTransactionNum(walletAddr);\n            vars.userClaimedTransaction = incentivePool.userToClaimedTransactionNum(walletAddr);\n\n            vars.transactionNum =\n                vars.affilateLeftTransaction +\n                vars.affilateClaimedTransaction +\n                vars.userLeftTransaction +\n                vars.userClaimedTransaction;\n\n            if (vars.transactionNum > 0) {\n                res.productNum++;\n                res.totalTransactionNum += vars.transactionNum;\n\n                vars.affiliateAmountPerTransaction = (incentivePool.getIncentiveInfo()).affiliateAmountPerTransaction;\n                vars.userAmountPerTransaction = (incentivePool.getIncentiveInfo()).userAmountPerTransaction;\n\n                vars.affiliateClaimed = vars.affilateClaimedTransaction * vars.affiliateAmountPerTransaction;\n                vars.userClaimed = vars.userClaimedTransaction * vars.userAmountPerTransaction;\n                vars.claimed = vars.affiliateClaimed + vars.userClaimed;\n\n                res.totalClaimed += vars.claimed;\n\n                vars.affiliateEarned =\n                    vars.affiliateClaimed +\n                    vars.affilateLeftTransaction *\n                    vars.affiliateAmountPerTransaction;\n                vars.userEarned = vars.userClaimed + vars.userLeftTransaction * vars.userAmountPerTransaction;\n                vars.earned = vars.affiliateEarned + vars.userEarned;\n\n                res.totalEarned += vars.earned;\n\n                ProductInfo memory productInfo = ProductInfo(\n                    address(incentivePool),\n                    vars.affiliateEarned,\n                    vars.affiliateClaimed,\n                    vars.userEarned,\n                    vars.userClaimed\n                );\n                res.productInfos[i] = productInfo;\n            }\n        }\n    }\n\n    function createIncentivePool(CreateIncentivePoolReq memory req) external payable nonReentrant {\n        IncentiveInfo memory info = req.incentiveInfo;\n\n        require(msg.value >= poolCreationFee, \"NOT_ENOUGHT_VALUE\");\n        require(info.incentiveToken != address(0), \"INVALID_TOKEN_ADDRESS\");\n        require(deployerToIncentivePool[msg.sender] == address(0), \"PRODUCT_OWNED\");\n\n        uint256 initialAmount = info.leftTransactionNum * info.incentiveAmountPerTransaction;\n        IERC20(info.incentiveToken).transferFrom(msg.sender, address(this), initialAmount);\n\n        DeployIncentivePoolReq memory params;\n        params.deployer = msg.sender;\n        params.incentiveInfo = info;\n\n        IncentivePool incentivePool = new IncentivePool(params);\n\n        incentivePools.push(incentivePool);\n        deployers.push(msg.sender);\n        isValidPool[address(incentivePool)] = true;\n        deployerToIncentivePool[msg.sender] = address(incentivePool);\n\n        IERC20(info.incentiveToken).approve(address(incentivePool), initialAmount);\n        incentivePool.addLeftTransactionNum(info.leftTransactionNum);\n\n        emit CreateIncentivePool(msg.sender, address(incentivePool), initialAmount);\n    }\n\n    function updateIncentivePools(UpdateIncentivePoolsReq memory req) external nonReentrant {\n        require(msg.sender == masterAdmin, \"ACCESS_DENIED\");\n\n        for (uint256 i = 0; i < req.info.length; i++) {\n            address poolAddress = req.info[i].incentivePoolAddress;\n            require(isValidPool[poolAddress], \"INVALID_POOL_ADDRESS\");\n\n            IncentivePool incentivePool = IncentivePool(poolAddress);\n            incentivePool.updatePool(req.info[i].referrals);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}