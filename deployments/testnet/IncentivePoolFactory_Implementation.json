{
  "address": "0x5839Caf521061412e22A40fb6Be8c55F25e7dAe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        }
      ],
      "name": "CreateIncentivePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "incentiveToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "incentiveAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliateAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "userAmountPerTransaction",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "leftTransactionNum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTransactionNumPerWallet",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimeStamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonDtos.IncentiveInfo",
              "name": "incentiveInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct CommonDtos.CreateIncentivePoolReq",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "createIncentivePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployerToIncentivePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivePoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        }
      ],
      "name": "getUserDashboardData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalEarned",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productNum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTransactionNum",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "incentivePoolAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliateEarned",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliateClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "userEarned",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "userClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonDtos.ProductInfo[]",
              "name": "productInfos",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CommonDtos.GetUserDashboardDataRes",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "incentivePools",
      "outputs": [
        {
          "internalType": "contract IncentivePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAdmin_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolCreationFee_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCreationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "incentivePoolAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "affiliate",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "user",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct CommonDtos.Referral[]",
                  "name": "referrals",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonDtos.PoolUpdateInfo[]",
              "name": "info",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CommonDtos.UpdateIncentivePoolsReq",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "updateIncentivePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb4e9a71a057f65cf8280554341cc6517a01cb6db4770657554f8cfae8a9819d",
  "receipt": {
    "to": null,
    "from": "0x4A3c81C838eE7523F49648A28874B80811baaA79",
    "contractAddress": "0x5839Caf521061412e22A40fb6Be8c55F25e7dAe6",
    "transactionIndex": 76,
    "gasUsed": "2540194",
    "logsBloom": "0x
    "blockHash": "0xa3232ee85326aa16b207279fe240df02b73d979519ac44a688239d456f7d1f42",
    "transactionHash": "0xfb4e9a71a057f65cf8280554341cc6517a01cb6db4770657554f8cfae8a9819d",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 5578926,
        "transactionHash": "0xfb4e9a71a057f65cf8280554341cc6517a01cb6db4770657554f8cfae8a9819d",
        "address": "0x5839Caf521061412e22A40fb6Be8c55F25e7dAe6",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 94,
        "blockHash": "0xa3232ee85326aa16b207279fe240df02b73d979519ac44a688239d456f7d1f42"
      }
    ],
    "blockNumber": 5578926,
    "cumulativeGasUsed": "9163610",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2ca507da490d57c9870841fe220faa0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"CreateIncentivePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"incentiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"incentiveAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountPerTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftTransactionNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransactionNumPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonDtos.IncentiveInfo\",\"name\":\"incentiveInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct CommonDtos.CreateIncentivePoolReq\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"createIncentivePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployerToIncentivePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivePoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddr\",\"type\":\"address\"}],\"name\":\"getUserDashboardData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransactionNum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"incentivePoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affiliateEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonDtos.ProductInfo[]\",\"name\":\"productInfos\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonDtos.GetUserDashboardDataRes\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentivePools\",\"outputs\":[{\"internalType\":\"contract IncentivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolCreationFee_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"incentivePoolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"internalType\":\"struct CommonDtos.Referral[]\",\"name\":\"referrals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonDtos.PoolUpdateInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonDtos.UpdateIncentivePoolsReq\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"updateIncentivePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_notEntered\":{\"details\":\"Guard variable for re-entrancy checks\"},\"poolCreationFee\":{\"details\":\"Should be multiplied by unit of ether(1e18)\"}},\"version\":1},\"userdoc\":{\"events\":{\"CreateIncentivePool(address,address,uint256)\":{\"notice\":\"Emitted when leftTransactionNum is added\"}},\"kind\":\"user\",\"methods\":{\"deployerToIncentivePool(address)\":{\"notice\":\"Mapping of deployer address to pool address\"},\"deployers(uint256)\":{\"notice\":\"Addresses of the deployers\"},\"incentivePools(uint256)\":{\"notice\":\"List of product incentive pools\"},\"isValidPool(address)\":{\"notice\":\"Mapping of pool address to validness(is it deployed?)\"},\"masterAdmin()\":{\"notice\":\"Address of the master admin of split\"},\"poolCreationFee()\":{\"notice\":\"Pool creation fee paid by contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IncentivePoolFactory.sol\":\"IncentivePoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/IncentivePool.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./IncentivePoolStorage.sol\\\";\\nimport \\\"./common/token/IERC20.sol\\\";\\n\\ncontract IncentivePool is IncentivePoolStorage {\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"ALREADY_ENTERED\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    constructor(DeployIncentivePoolReq memory req) {\\n        IncentiveInfo memory info = req.incentiveInfo;\\n\\n        factory = msg.sender;\\n        poolAdmin = req.deployer;\\n        incentiveInfo = info;\\n\\n        isClaimPaused = false;\\n        isUpdatePaused = false;\\n\\n        _notEntered = true;\\n    }\\n\\n    function getIncentiveInfo() external view returns (IncentiveInfo memory) {\\n        return incentiveInfo;\\n    }\\n\\n    function getAffiliates() external view returns (address[] memory) {\\n        uint len = affiliates.length;\\n        address[] memory result = new address[](len);\\n\\n        for (uint i = 0; i < len; i += 1) {\\n            address deployer = address(affiliates[i]);\\n            result[i] = deployer;\\n        }\\n\\n        return result;\\n    }\\n\\n    function getUsers() external view returns (address[] memory) {\\n        uint len = users.length;\\n        address[] memory result = new address[](len);\\n\\n        for (uint i = 0; i < len; i += 1) {\\n            address deployer = address(users[i]);\\n            result[i] = deployer;\\n        }\\n\\n        return result;\\n    }\\n\\n    function addLeftTransactionNum(uint256 addedTransactionNum) external {\\n        require(msg.sender == factory || msg.sender == poolAdmin, \\\"ACCESS_DENIED\\\");\\n\\n        uint256 addedIncentiveAmount = addedTransactionNum * incentiveInfo.incentiveAmountPerTransaction;\\n        IERC20(incentiveInfo.incentiveToken).transferFrom(msg.sender, address(this), addedIncentiveAmount);\\n\\n        // msg.sender\\uac00 factory\\uc778 \\uacbd\\uc6b0, \\uc0dd\\uc131\\uc790\\uc5d0\\uc11c leftTransactionNum\\uc744 \\uc124\\uc815\\n        if (msg.sender != factory) {\\n            incentiveInfo.leftTransactionNum += addedTransactionNum;\\n        }\\n\\n        emit AddLeftTransactionNum(addedTransactionNum, incentiveInfo.leftTransactionNum, addedIncentiveAmount);\\n    }\\n\\n    function updatePool(Referral[] memory referrals) external {\\n        require(isUpdatePaused == false, \\\"CLAIM_PAUSED\\\");\\n        require(msg.sender == factory, \\\"ACCESS_DENIED\\\");\\n\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            address affiliate = referrals[i].affiliate;\\n            address user = referrals[i].user;\\n\\n            // \\ucd94\\ucc9c\\uc778 \\uc815\\ubcf4 \\uc5c5\\ub370\\uc774\\ud2b8\\n            ConnectedUserData storage userData = affiliateToLeftTransactionNum[affiliate];\\n\\n            bool isRegisteredUser = isAffiliateUserRelated[affiliate][user];\\n            if (!isRegisteredUser) {\\n                isAffiliateUserRelated[affiliate][user] = true;\\n                userData.users.push(user);\\n            }\\n\\n            userData.leftTransactionNum++;\\n\\n            // \\uc0ac\\uc6a9\\uc790 \\uc815\\ubcf4 \\uc5c5\\ub370\\uc774\\ud2b8\\n            userToLeftTransactionNum[user]++;\\n\\n            // \\uc804\\uccb4 \\ud480 \\uc815\\ubcf4 \\uc5c5\\ub370\\uc774\\ud2b8\\n            if (!isAffiliateExist[affiliate]) {\\n                isAffiliateExist[affiliate] = true;\\n                affiliates.push(affiliate);\\n            }\\n            if (!isUserExist[user]) {\\n                isUserExist[user] = true;\\n                users.push(user);\\n            }\\n        }\\n    }\\n\\n    function claimAffiliateIncentive() external nonReentrant {\\n        require(isClaimPaused == false, \\\"CLAIM_PAUSED\\\");\\n\\n        ConnectedUserData storage userData = affiliateToLeftTransactionNum[msg.sender];\\n        uint256 claimTransactionNum = userData.leftTransactionNum;\\n\\n        userData.leftTransactionNum = 0;\\n        affiliateToClaimedTransactionNum[msg.sender] += claimTransactionNum;\\n\\n        require(claimTransactionNum > 0, \\\"NO_TRANSACTION\\\");\\n\\n        uint256 claimValue = claimTransactionNum * incentiveInfo.affiliateAmountPerTransaction;\\n        IERC20(incentiveInfo.incentiveToken).transfer(msg.sender, claimValue);\\n\\n        emit ClaimIncentive(msg.sender, ClaimType.AFFILIATE, claimTransactionNum, claimValue);\\n    }\\n\\n    function claimUserIncentive() external nonReentrant {\\n        require(isClaimPaused == false, \\\"CLAIM_PAUSED\\\");\\n\\n        uint256 claimTransactionNum = userToLeftTransactionNum[msg.sender];\\n        require(claimTransactionNum > 0, \\\"NO_TRANSACTION\\\");\\n\\n        userToLeftTransactionNum[msg.sender] = 0;\\n        userToClaimedTransactionNum[msg.sender] += claimTransactionNum;\\n\\n        uint256 claimValue = claimTransactionNum * incentiveInfo.userAmountPerTransaction;\\n        IERC20(incentiveInfo.incentiveToken).transfer(msg.sender, claimValue);\\n\\n        emit ClaimIncentive(msg.sender, ClaimType.USER, claimTransactionNum, claimValue);\\n    }\\n}\\n\",\"keccak256\":\"0x3781127c5ed2b310485e4b71a12629100851c12a024c432211c55ded2592a929\"},\"src/IncentivePoolFactory.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./common/upgradeable/Initializable.sol\\\";\\nimport \\\"./interface/IncentivePoolFactoryInterface.sol\\\";\\nimport \\\"./IncentivePool.sol\\\";\\nimport \\\"./interface/IncentivePoolInterface.sol\\\";\\nimport \\\"./common/token/IERC20.sol\\\";\\n\\ncontract IncentivePoolFactory is IncentivePoolFactoryInterface, Initializable {\\n    ///  @notice List of product incentive pools\\n    IncentivePool[] public incentivePools;\\n\\n    ///  @notice Mapping of pool address to validness(is it deployed?)\\n    mapping(address => bool) public isValidPool;\\n\\n    ///  @notice Mapping of deployer address to pool address\\n    mapping(address => address) public deployerToIncentivePool;\\n\\n    ///  @notice Pool creation fee paid by contract\\n    ///  @dev Should be multiplied by unit of ether(1e18)\\n    uint256 public poolCreationFee;\\n\\n    ///  @notice Address of the master admin of split\\n    address public masterAdmin;\\n\\n    ///  @notice Addresses of the deployers\\n    address[] public deployers;\\n\\n    ///  @dev Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"ALREADY_ENTERED\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address masterAdmin_, uint256 poolCreationFee_) public initializer {\\n        masterAdmin = masterAdmin_;\\n        poolCreationFee = poolCreationFee_;\\n\\n        _notEntered = true;\\n    }\\n\\n    function getIncentivePoolAddresses() external view returns (address[] memory) {\\n        uint len = incentivePools.length;\\n        address[] memory result = new address[](len);\\n\\n        for (uint i = 0; i < len; i += 1) {\\n            address incentivePool = address(incentivePools[i]);\\n            result[i] = incentivePool;\\n        }\\n\\n        return result;\\n    }\\n\\n    function getDeployers() external view returns (address[] memory) {\\n        uint len = deployers.length;\\n        address[] memory result = new address[](len);\\n\\n        for (uint i = 0; i < len; i += 1) {\\n            address deployer = address(deployers[i]);\\n            result[i] = deployer;\\n        }\\n\\n        return result;\\n    }\\n\\n    struct GetUserDashboardLocalVars {\\n        uint256 affilateLeftTransaction;\\n        uint256 affilateClaimedTransaction;\\n        uint256 userLeftTransaction;\\n        uint256 userClaimedTransaction;\\n        uint256 affiliateAmountPerTransaction;\\n        uint256 userAmountPerTransaction;\\n        uint256 affiliateClaimed;\\n        uint256 userClaimed;\\n        uint256 claimed;\\n        uint256 affiliateEarned;\\n        uint256 userEarned;\\n        uint256 earned;\\n        uint256 transactionNum;\\n    }\\n\\n    function getUserDashboardData(address walletAddr) external view returns (GetUserDashboardDataRes memory res) {\\n        GetUserDashboardLocalVars memory vars;\\n\\n        res.totalClaimed = 0;\\n        res.totalEarned = 0;\\n        res.productNum = 0;\\n        res.totalTransactionNum = 0;\\n        res.productInfos = new ProductInfo[](incentivePools.length);\\n\\n        for (uint256 i = 0; i < incentivePools.length; i++) {\\n            IncentivePoolInterface incentivePool = incentivePools[i];\\n\\n            vars.affilateLeftTransaction = incentivePool.affiliateToLeftTransactionNum(walletAddr);\\n            vars.affilateClaimedTransaction = incentivePool.affiliateToClaimedTransactionNum(walletAddr);\\n            vars.userLeftTransaction = incentivePool.userToLeftTransactionNum(walletAddr);\\n            vars.userClaimedTransaction = incentivePool.userToClaimedTransactionNum(walletAddr);\\n\\n            vars.transactionNum =\\n                vars.affilateLeftTransaction +\\n                vars.affilateClaimedTransaction +\\n                vars.userLeftTransaction +\\n                vars.userClaimedTransaction;\\n\\n            if (vars.transactionNum > 0) {\\n                res.productNum++;\\n                res.totalTransactionNum += vars.transactionNum;\\n\\n                vars.affiliateAmountPerTransaction = (incentivePool.getIncentiveInfo()).affiliateAmountPerTransaction;\\n                vars.userAmountPerTransaction = (incentivePool.getIncentiveInfo()).userAmountPerTransaction;\\n\\n                vars.affiliateClaimed = vars.affilateClaimedTransaction * vars.affiliateAmountPerTransaction;\\n                vars.userClaimed = vars.userClaimedTransaction * vars.userAmountPerTransaction;\\n                vars.claimed = vars.affiliateClaimed + vars.userClaimed;\\n\\n                res.totalClaimed += vars.claimed;\\n\\n                vars.affiliateEarned =\\n                    vars.affiliateClaimed +\\n                    vars.affilateLeftTransaction *\\n                    vars.affiliateAmountPerTransaction;\\n                vars.userEarned = vars.userClaimed + vars.userLeftTransaction * vars.userAmountPerTransaction;\\n                vars.earned = vars.affiliateEarned + vars.userEarned;\\n\\n                res.totalEarned += vars.earned;\\n\\n                ProductInfo memory productInfo = ProductInfo(\\n                    address(incentivePool),\\n                    vars.affiliateEarned,\\n                    vars.affiliateClaimed,\\n                    vars.userEarned,\\n                    vars.userClaimed\\n                );\\n                res.productInfos[i] = productInfo;\\n            }\\n        }\\n    }\\n\\n    function createIncentivePool(CreateIncentivePoolReq memory req) external payable nonReentrant {\\n        IncentiveInfo memory info = req.incentiveInfo;\\n\\n        require(msg.value >= poolCreationFee, \\\"NOT_ENOUGHT_VALUE\\\");\\n        require(info.incentiveToken != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n        require(deployerToIncentivePool[msg.sender] == address(0), \\\"PRODUCT_OWNED\\\");\\n\\n        uint256 initialAmount = info.leftTransactionNum * info.incentiveAmountPerTransaction;\\n        IERC20(info.incentiveToken).transferFrom(msg.sender, address(this), initialAmount);\\n\\n        DeployIncentivePoolReq memory params;\\n        params.deployer = msg.sender;\\n        params.incentiveInfo = info;\\n\\n        IncentivePool incentivePool = new IncentivePool(params);\\n\\n        incentivePools.push(incentivePool);\\n        deployers.push(msg.sender);\\n        isValidPool[address(incentivePool)] = true;\\n        deployerToIncentivePool[msg.sender] = address(incentivePool);\\n\\n        IERC20(info.incentiveToken).approve(address(incentivePool), initialAmount);\\n        incentivePool.addLeftTransactionNum(info.leftTransactionNum);\\n\\n        emit CreateIncentivePool(msg.sender, address(incentivePool), initialAmount);\\n    }\\n\\n    function updateIncentivePools(UpdateIncentivePoolsReq memory req) external nonReentrant {\\n        require(msg.sender == masterAdmin, \\\"ACCESS_DENIED\\\");\\n\\n        for (uint256 i = 0; i < req.info.length; i++) {\\n            address poolAddress = req.info[i].incentivePoolAddress;\\n            require(isValidPool[poolAddress], \\\"INVALID_POOL_ADDRESS\\\");\\n\\n            IncentivePool incentivePool = IncentivePool(poolAddress);\\n            incentivePool.updatePool(req.info[i].referrals);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4584fe8eeee13fe4480ebe2dcda9c5abfd1b6858e5ae75480296e1a6852526a2\"},\"src/IncentivePoolStorage.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./interface/IncentivePoolInterface.sol\\\";\\n\\nabstract contract IncentivePoolStorage is IncentivePoolInterface {\\n    /// @notice IncentivePoolFactory \\ucee8\\ud2b8\\ub799\\ud2b8 \\uc8fc\\uc18c\\n    address public factory;\\n\\n    /// @notice \\ud480 \\uad00\\ub9ac\\uc790 \\uc8fc\\uc18c\\n    address public poolAdmin;\\n\\n    /// @notice \\ud574\\ub2f9 \\ud480\\uc758 \\uc804\\uccb4 \\ucd94\\ucc9c\\uc778 \\ubaa9\\ub85d\\n    address[] public affiliates;\\n\\n    /// @notice \\ud574\\ub2f9 \\ud480\\uc758 \\ucd94\\ucc9c\\uc778 \\ub4f1\\ub85d \\uc5ec\\ubd80\\n    mapping(address => bool) public isAffiliateExist;\\n\\n    /// @notice \\ud574\\ub2f9 \\ud480\\uc758 \\uc804\\uccb4 \\uc0ac\\uc6a9\\uc790 \\ubaa9\\ub85d\\n    address[] public users;\\n\\n    /// @notice \\ud574\\ub2f9 \\ud480\\uc758 \\ucd94\\ucc9c\\uc778 \\ub4f1\\ub85d \\uc5ec\\ubd80\\n    mapping(address => bool) public isUserExist;\\n\\n    /// @notice \\uc778\\uc13c\\ud2f0\\ube0c \\uad00\\ub828 \\ub370\\uc774\\ud130\\n    IncentiveInfo public incentiveInfo;\\n\\n    mapping(address => mapping(address => bool)) isAffiliateUserRelated; // \\ud5e4\\ub2f9 \\ucd94\\ucc9c\\uc778\\uc758 \\ub9c1\\ud06c\\uc5d0 \\ub4f1\\ub85d\\ub41c \\uc0ac\\uc6a9\\uc790\\uc778\\uc9c0 \\uccb4\\ud06c)\\n\\n    mapping(address => ConnectedUserData) public affiliateToLeftTransactionNum;\\n\\n    mapping(address => uint256) public userToLeftTransactionNum;\\n\\n    mapping(address => uint256) public affiliateToClaimedTransactionNum;\\n\\n    mapping(address => uint256) public userToClaimedTransactionNum;\\n\\n    bool public isClaimPaused;\\n\\n    bool public isUpdatePaused;\\n\\n    ///  @dev Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n}\\n\",\"keccak256\":\"0xabcda9a205fe75f71c15d0760493a3e7f16ecc207ccbb07a7b19afc5ee201857\"},\"src/common/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x91eee3141487cbd609801b77dcc2c735a1d8e81b8b9ed0cfe4abc30cec9028ce\",\"license\":\"MIT\"},\"src/common/upgradeable/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/utils/AddressUpgradeable.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61a2215ae62e961ed096a5aa73d50b9eeb6f096c0931a6c052e8f1f12bd9ffbb\",\"license\":\"BSD-3-Clause\"},\"src/common/upgradeable/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x1ea77583ca01cbefc4132742fa2c3cfd17b6ff3336822ca4381d6cb517e4af6e\",\"license\":\"MIT\"},\"src/interface/CommonDtos.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\ninterface CommonDtos {\\n    struct IncentiveInfo {\\n        address incentiveToken;\\n        uint256 incentiveAmountPerTransaction;\\n        uint256 affiliateAmountPerTransaction;\\n        uint256 userAmountPerTransaction;\\n        uint256 leftTransactionNum;\\n        uint256 maxTransactionNumPerWallet;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct CreateIncentivePoolReq {\\n        IncentiveInfo incentiveInfo;\\n    }\\n\\n    struct DeployIncentivePoolReq {\\n        address deployer;\\n        IncentiveInfo incentiveInfo;\\n    }\\n\\n    struct ConnectedUserData {\\n        address[] users; // \\uc0ac\\uc6a9\\uc790 \\uc9c0\\uac11 \\uc8fc\\uc18c\\n        uint256 leftTransactionNum; // \\ucd94\\ucc9c\\uc778\\uc774 \\ubcf4\\uc0c1\\uc744 \\ubc1b\\uc744 \\uc218 \\uc788\\ub294 (\\ub0a8\\uc544\\uc788\\ub294) TX \\ud569\\n    }\\n\\n    struct Referral {\\n        address affiliate;\\n        address user;\\n    }\\n\\n    struct PoolUpdateInfo {\\n        address incentivePoolAddress;\\n        Referral[] referrals;\\n    }\\n\\n    struct UpdateIncentivePoolsReq {\\n        PoolUpdateInfo[] info;\\n    }\\n\\n    struct ProductInfo {\\n        address incentivePoolAddress;\\n        uint256 affiliateEarned;\\n        uint256 affiliateClaimed;\\n        uint256 userEarned;\\n        uint256 userClaimed;\\n    }\\n\\n    struct GetUserDashboardDataRes {\\n        uint256 totalEarned;\\n        uint256 totalClaimed;\\n        uint256 productNum;\\n        uint256 totalTransactionNum;\\n        ProductInfo[] productInfos;\\n    }\\n}\\n\",\"keccak256\":\"0x9bbe6fc2fe9a147c7612a1032448ef566e9ca543fbd7063777be7ee3953324d4\"},\"src/interface/IncentivePoolFactoryInterface.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./CommonDtos.sol\\\";\\n\\ninterface IncentivePoolFactoryInterface is CommonDtos {\\n    /// @notice Emitted when leftTransactionNum is added\\n    event CreateIncentivePool(address caller, address poolAddress, uint256 initialAmount);\\n}\\n\",\"keccak256\":\"0x70621b7a9e99808c9f82a71884de9c0d2fa8d5c7dac7ced68b67a85c2065fcd9\"},\"src/interface/IncentivePoolInterface.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"./CommonDtos.sol\\\";\\n\\ninterface IncentivePoolInterface is CommonDtos {\\n    enum ClaimType {\\n        AFFILIATE,\\n        USER\\n    }\\n\\n    function getIncentiveInfo() external view returns (IncentiveInfo memory);\\n\\n    function affiliateToLeftTransactionNum(address affiliate) external view returns (uint256);\\n\\n    function userToLeftTransactionNum(address user) external view returns (uint256);\\n\\n    function affiliateToClaimedTransactionNum(address affiliate) external view returns (uint256);\\n\\n    function userToClaimedTransactionNum(address user) external view returns (uint256);\\n\\n    /// @notice Emitted when leftTransactionNum is added\\n    event AddLeftTransactionNum(uint256 addedTransactionNum, uint256 totalTransactionNum, uint256 addedIncentiveAmount);\\n\\n    /// @notice Emitted when affiliate claim the incentive\\n    event ClaimIncentive(\\n        address indexed caller,\\n        ClaimType indexed claimType,\\n        uint256 claimTransactionNum,\\n        uint256 claimedValue\\n    );\\n}\\n\",\"keccak256\":\"0xc8cce4033fdfb0539dda53827f6d1db5d690b8cf1570902335b2cb9c02e55c29\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612c93806100ec6000396000f3fe608060405260043610620000b55760003560e01c80636764cdc0116200006c5780636764cdc014620001d05780638ba97b9b14620001f55780638faa77b2146200021a578063be74615f146200023f578063cd6dc6871462000266578063d9803fad146200028b57600080fd5b806325bd84a214620000ba5780632a68f64e1462000111578063581ff0c814620001335780635ab78ee1146200014c578063607c12b51462000191578063660a69cb14620001b8575b600080fd5b348015620000c757600080fd5b50620000f4620000d9366004620012fd565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200011e57600080fd5b50600554620000f4906001600160a01b031681565b6200014a62000144366004620013e6565b620002bf565b005b3480156200015957600080fd5b50620001806200016b366004620012fd565b60026020526000908152604090205460ff1681565b604051901515815260200162000108565b3480156200019e57600080fd5b50620001a962000735565b60405162000108919062001487565b348015620001c557600080fd5b50620001a962000815565b348015620001dd57600080fd5b506200014a620001ef366004620014fd565b620008ee565b3480156200020257600080fd5b50620000f462000214366004620016fd565b62000ad9565b3480156200022757600080fd5b50620000f462000239366004620016fd565b62000b04565b3480156200024c57600080fd5b506200025760045481565b60405190815260200162000108565b3480156200027357600080fd5b506200014a6200028536600462001717565b62000b15565b3480156200029857600080fd5b50620002b0620002aa366004620012fd565b62000c54565b60405162000108919062001746565b60075460ff16620003095760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064015b60405180910390fd5b6007805460ff1916905580516004543410156200035d5760405162461bcd60e51b81526020600482015260116024820152704e4f545f454e4f554748545f56414c554560781b604482015260640162000300565b80516001600160a01b0316620003ae5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b604482015260640162000300565b336000908152600360205260409020546001600160a01b031615620004065760405162461bcd60e51b815260206004820152600d60248201526c141493d11550d517d3d5d39151609a1b604482015260640162000300565b6000816020015182608001516200041e919062001810565b82516040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801562000476573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049c919062001832565b50620004a76200126c565b338152602081018390526040516000908290620004c490620012d6565b62000532919060006101008201905060018060a01b038084511683526020840151818151166020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c081015160e0850152505092915050565b604051809103906000f0801580156200054f573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03199081166001600160a01b03858116918217909355600680548086019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180543390841681179091556000828152600260209081526040808320805460ff19169098179097559181526003909152849020805490921681179091558751925163095ea7b360e01b8152600481019190915260248101879052929350169063095ea7b3906044016020604051808303816000875af11580156200064e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000674919062001832565b506080840151604051634753a7a160e11b815260048101919091526001600160a01b03821690638ea74f4290602401600060405180830381600087803b158015620006be57600080fd5b505af1158015620006d3573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201529081018690527f1ebff2f2b8dfaf965fffb2fddfa8e705e28ca6c7f0966cfc8f8587449774b6e09250606001905060405180910390a150506007805460ff19166001179055505050565b60065460609060008167ffffffffffffffff81111562000759576200075962001324565b60405190808252806020026020018201604052801562000783578160200160208202803683370190505b50905060005b828110156200080e57600060068281548110620007aa57620007aa62001856565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110620007e057620007e062001856565b6001600160a01b039092166020928302919091019091015250620008066001826200186c565b905062000789565b5092915050565b60015460609060008167ffffffffffffffff81111562000839576200083962001324565b60405190808252806020026020018201604052801562000863578160200160208202803683370190505b50905060005b828110156200080e576000600182815481106200088a576200088a62001856565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110620008c057620008c062001856565b6001600160a01b039092166020928302919091019091015250620008e66001826200186c565b905062000869565b60075460ff16620009345760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640162000300565b6007805460ff191690556005546001600160a01b031633146200098a5760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640162000300565b60005b81515181101562000ac857600082600001518281518110620009b357620009b362001856565b602090810291909101810151516001600160a01b0381166000908152600290925260409091205490915060ff1662000a255760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f504f4f4c5f4144445245535360601b604482015260640162000300565b6000819050806001600160a01b031663f8a8f9e78560000151858151811062000a525762000a5262001856565b6020026020010151602001516040518263ffffffff1660e01b815260040162000a7c919062001887565b600060405180830381600087803b15801562000a9757600080fd5b505af115801562000aac573d6000803e3d6000fd5b505050505050808062000abf90620018e5565b9150506200098d565b50506007805460ff19166001179055565b6001818154811062000aea57600080fd5b6000918252602090912001546001600160a01b0316905081565b6006818154811062000aea57600080fd5b600054610100900460ff161580801562000b365750600054600160ff909116105b8062000b525750303b15801562000b52575060005460ff166001145b62000bb75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000300565b6000805460ff19166001179055801562000bdb576000805461ff0019166101001790555b600580546001600160a01b0319166001600160a01b03851617905560048290556007805460ff19166001179055801562000c4f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b62000c876040518060a0016040528060008152602001600081526020016000815260200160008152602001606081525090565b62000cf3604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020830181905280835260408301819052606083015260015467ffffffffffffffff81111562000d295762000d2962001324565b60405190808252806020026020018201604052801562000d9857816020015b62000d846040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908162000d485790505b50608083015260005b600154811015620012655760006001828154811062000dc45762000dc462001856565b60009182526020909120015460405163839e7e8960e01b81526001600160a01b0387811660048301529091169150819063839e7e8990602401602060405180830381865afa15801562000e1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e41919062001903565b8352604051631eb97e0f60e01b81526001600160a01b038681166004830152821690631eb97e0f90602401602060405180830381865afa15801562000e8a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eb0919062001903565b602084015260405163a3d09c1b60e01b81526001600160a01b03868116600483015282169063a3d09c1b90602401602060405180830381865afa15801562000efc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f22919062001903565b6040848101919091525163bdab4a2f60e01b81526001600160a01b03868116600483015282169063bdab4a2f90602401602060405180830381865afa15801562000f70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f96919062001903565b6060840181905260408401516020850151855162000fb591906200186c565b62000fc191906200186c565b62000fcd91906200186c565b6101808401819052156200124f576040840180519062000fed82620018e5565b905250610180830151606085018051620010099083906200186c565b91508181525050806001600160a01b031663ed9fc4ec6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156200104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107591906200191d565b60400151836080018181525050806001600160a01b031663ed9fc4ec6040518163ffffffff1660e01b815260040160e060405180830381865afa158015620010c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010e791906200191d565b6060015160a08401526080830151602084015162001106919062001810565b60c084015260a0830151606084015162001121919062001810565b60e0840181905260c08401516200113991906200186c565b6101008401819052602085018051620011549083906200186c565b905250608083015183516200116a919062001810565b8360c001516200117b91906200186c565b61012084015260a0830151604084015162001197919062001810565b8360e00151620011a891906200186c565b6101408401819052610120840151620011c291906200186c565b610160840181905284518590620011db9083906200186c565b9150818152505060006040518060a00160405280836001600160a01b0316815260200185610120015181526020018560c00151815260200185610140015181526020018560e001518152509050808560800151848151811062001242576200124262001856565b6020026020010181905250505b50806200125c81620018e5565b91505062000da1565b5050919050565b604051806040016040528060006001600160a01b03168152602001620012d16040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b6112cc806200199283390190565b6001600160a01b0381168114620012fa57600080fd5b50565b6000602082840312156200131057600080fd5b81356200131d81620012e4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171562001360576200136062001324565b60405290565b6040516020810167ffffffffffffffff8111828210171562001360576200136062001324565b6040805190810167ffffffffffffffff8111828210171562001360576200136062001324565b604051601f8201601f1916810167ffffffffffffffff81118282101715620013de57620013de62001324565b604052919050565b600060e08284031215620013f957600080fd5b6040516020810181811067ffffffffffffffff821117156200141f576200141f62001324565b6040526200142c6200133a565b83356200143981620012e4565b808252506020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c0820152808252508091505092915050565b6020808252825182820181905260009190848201906040850190845b81811015620014ca5783516001600160a01b031683529284019291840191600101620014a3565b50909695505050505050565b600067ffffffffffffffff821115620014f357620014f362001324565b5060051b60200190565b6000602082840312156200151057600080fd5b67ffffffffffffffff80833511156200152857600080fd5b602083358401850312156200153c57600080fd5b6200154662001366565b81843585013511156200155857600080fd5b83358401803501601f810186136200156f57600080fd5b620015856200157f8235620014d6565b620013b2565b81358082526020808301929160051b840101881015620015a457600080fd5b602083015b6020843560051b850101811015620016ef578581351115620015ca57600080fd5b803584016040818b03601f19011215620015e357600080fd5b620015ed6200138c565b620015fc6020830135620012e4565b6020820135815287604083013511156200161557600080fd5b6040820135820191508a603f8301126200162e57600080fd5b620016416200157f6020840135620014d6565b602083810135808352908201919060061b84016040018d8111156200166557600080fd5b6040850194505b80851015620016cf576040858f0312156200168657600080fd5b620016906200138c565b6200169c8635620012e4565b85358152620016af6020870135620012e4565b60208601356020820152808452506020830192506040850194506200166c565b5080602084015250508085525050602083019250602081019050620015a9565b508352509095945050505050565b6000602082840312156200171057600080fd5b5035919050565b600080604083850312156200172b57600080fd5b82356200173881620012e4565b946020939093013593505050565b6000602080835260c083018451828501528185015160408181870152808701519150606082818801528088015192506080838189015280890151935060a080818a015285855180885260e08b0191508887019750600096505b80871015620017eb57875180516001600160a01b03168352898101518a84015286810151878401528581015186840152840151848301529688019660019690960195908201906200179f565b509a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156200182d576200182d620017fa565b500290565b6000602082840312156200184557600080fd5b815180151581146200131d57600080fd5b634e487b7160e01b600052603260045260246000fd5b60008219821115620018825762001882620017fa565b500190565b602080825282518282018190526000919060409081850190868401855b82811015620018d857815180516001600160a01b0390811686529087015116868501529284019290850190600101620018a4565b5091979650505050505050565b6000600019821415620018fc57620018fc620017fa565b5060010190565b6000602082840312156200191657600080fd5b5051919050565b600060e082840312156200193057600080fd5b6200193a6200133a565b82516200194781620012e4565b808252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152809150509291505056fe60806040523480156200001157600080fd5b50604051620012cc380380620012cc83398101604081905262000034916200013f565b60208181015160008054336001600160a01b03199182161790915592516001805485166001600160a01b03928316179055815160068054909516911617909255810151600755604081015160085560608101516009556080810151600a5560a0810151600b5560c00151600c55601280546201000062ffffff19909116179055620001e7565b604080519081016001600160401b0381118282101715620000eb57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e081016001600160401b0381118282101715620000eb57634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200013a57600080fd5b919050565b60008183036101008112156200015457600080fd5b6200015e620000ba565b620001698462000122565b815260e0601f19830112156200017e57600080fd5b62000188620000f1565b9150620001986020850162000122565b825260408401516020830152606084015160408301526080840151606083015260a0840151608083015260c084015160a083015260e084015160c0830152816020820152809250505092915050565b6110d580620001f76000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c8063a8046609116100ad578063c9a0b40611610071578063c9a0b406146102d5578063ebd238fb146102dd578063ed9fc4ec14610347578063f1b3f86f146103a9578063f8a8f9e7146103b157600080fd5b8063a804660914610264578063b610fb6414610287578063b782cc491461028f578063bdab4a2f146102a2578063c45a0155146102c257600080fd5b806350bc9995116100f457806350bc9995146101ed578063839e7e89146101fa5780638ea74f421461021d5780639361076a14610232578063a3d09c1b1461024457600080fd5b8062ce8e3e146101305780630255fa1e1461014e5780631bd78748146101815780631eb97e0f146101ac578063365b98b2146101da575b600080fd5b6101386103c4565b6040516101459190610de9565b60405180910390f35b61017161015c366004610e52565b60056020526000908152604090205460ff1681565b6040519015158152602001610145565b61019461018f366004610e74565b610496565b6040516001600160a01b039091168152602001610145565b6101cc6101ba366004610e52565b60106020526000908152604090205481565b604051908152602001610145565b6101946101e8366004610e74565b6104c0565b6012546101719060ff1681565b6101cc610208366004610e52565b600e6020526000908152604090206001015481565b61023061022b366004610e74565b6104d0565b005b60125461017190610100900460ff1681565b6101cc610252366004610e52565b600f6020526000908152604090205481565b610171610272366004610e52565b60036020526000908152604090205460ff1681565b610230610636565b600154610194906001600160a01b031681565b6101cc6102b0366004610e52565b60116020526000908152604090205481565b600054610194906001600160a01b031681565b610230610806565b600654600754600854600954600a54600b54600c54610308966001600160a01b031695949392919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610145565b61034f6109d0565b604051610145919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0918201519181019190915260e00190565b610138610a67565b6102306103bf366004610efd565b610b32565b60045460609060008167ffffffffffffffff8111156103e5576103e5610e8d565b60405190808252806020026020018201604052801561040e578160200160208202803683370190505b50905060005b8281101561048f5760006004828154811061043157610431610fd9565b9060005260206000200160009054906101000a90046001600160a01b031690508083838151811061046457610464610fd9565b6001600160a01b039092166020928302919091019091015250610488600182611005565b9050610414565b5092915050565b600281815481106104a657600080fd5b6000918252602090912001546001600160a01b0316905081565b600481815481106104a657600080fd5b6000546001600160a01b03163314806104f357506001546001600160a01b031633145b6105345760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064015b60405180910390fd5b600754600090610544908361101d565b6006546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061103c565b506000546001600160a01b031633146105ee5781600660040160008282546105e89190611005565b90915550505b600a5460408051848152602081019290925281018290527f6213dc923ba9cebd39b57f99bbecb140a32b0af21fa6c41feee100e40b9179289060600160405180910390a15050565b60125462010000900460ff166106805760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161052b565b6012805462ff000019811690915560ff16156106ae5760405162461bcd60e51b815260040161052b9061105e565b336000908152600f6020526040902054806106fc5760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161052b565b336000908152600f60209081526040808320839055601190915281208054839290610728908490611005565b909155505060095460009061073d908361101d565b60065460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b3919061103c565b506001604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a350506012805462ff0000191662010000179055565b60125462010000900460ff166108505760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161052b565b6012805462ff000019811690915560ff161561087e5760405162461bcd60e51b815260040161052b9061105e565b336000908152600e602090815260408083206001810180549085905560109093529083208054919383926108b3908490611005565b9091555050806108f65760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161052b565b600854600090610906908361101d565b60065460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c919061103c565b506000604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a350506012805462ff000019166201000017905550565b610a196040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160e0810182526006546001600160a01b031681526007546020820152600854918101919091526009546060820152600a546080820152600b5460a0820152600c5460c082015290565b60025460609060008167ffffffffffffffff811115610a8857610a88610e8d565b604051908082528060200260200182016040528015610ab1578160200160208202803683370190505b50905060005b8281101561048f57600060028281548110610ad457610ad4610fd9565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110610b0757610b07610fd9565b6001600160a01b039092166020928302919091019091015250610b2b600182611005565b9050610ab7565b601254610100900460ff1615610b5a5760405162461bcd60e51b815260040161052b9061105e565b6000546001600160a01b03163314610ba45760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640161052b565b60005b8151811015610de5576000828281518110610bc457610bc4610fd9565b60200260200101516000015190506000838381518110610be657610be6610fd9565b6020908102919091018101518101516001600160a01b038085166000908152600e84526040808220600d8652818320938516835292909452929092205490925060ff1680610c82576001600160a01b038085166000908152600d602090815260408083209387168084529382528220805460ff191660019081179091558554908101865585835291200180546001600160a01b03191690911790555b600182018054906000610c9483611084565b90915550506001600160a01b0383166000908152600f60205260408120805491610cbd83611084565b90915550506001600160a01b03841660009081526003602052604090205460ff16610d48576001600160a01b0384166000818152600360205260408120805460ff191660019081179091556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790555b6001600160a01b03831660009081526005602052604090205460ff16610dce576001600160a01b0383166000818152600560205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191690911790555b505050508080610ddd90611084565b915050610ba7565b5050565b6020808252825182820181905260009190848201906040850190845b81811015610e2a5783516001600160a01b031683529284019291840191600101610e05565b50909695505050505050565b80356001600160a01b0381168114610e4d57600080fd5b919050565b600060208284031215610e6457600080fd5b610e6d82610e36565b9392505050565b600060208284031215610e8657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610ec657610ec6610e8d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ef557610ef5610e8d565b604052919050565b60006020808385031215610f1057600080fd5b823567ffffffffffffffff80821115610f2857600080fd5b818501915085601f830112610f3c57600080fd5b813581811115610f4e57610f4e610e8d565b610f5c848260051b01610ecc565b818152848101925060069190911b830184019087821115610f7c57600080fd5b928401925b81841015610fce5760408489031215610f9a5760008081fd5b610fa2610ea3565b610fab85610e36565b8152610fb8868601610e36565b8187015283526040939093019291840191610f81565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561101857611018610fef565b500190565b600081600019048311821515161561103757611037610fef565b500290565b60006020828403121561104e57600080fd5b81518015158114610e6d57600080fd5b6020808252600c908201526b10d310525357d4105554d15160a21b604082015260600190565b600060001982141561109857611098610fef565b506001019056fea2646970667358221220bc449b1f3e91b0859630fe6fe07de8152a6a8154bd616afaab9415ee6836471664736f6c634300080b0033a26469706673582212207ae3b751657d290551c3742b84cb30999749b8288e48cee92ec4a6f62101573064736f6c634300080b0033",
  "deployedBytecode": "0x608060405260043610620000b55760003560e01c80636764cdc0116200006c5780636764cdc014620001d05780638ba97b9b14620001f55780638faa77b2146200021a578063be74615f146200023f578063cd6dc6871462000266578063d9803fad146200028b57600080fd5b806325bd84a214620000ba5780632a68f64e1462000111578063581ff0c814620001335780635ab78ee1146200014c578063607c12b51462000191578063660a69cb14620001b8575b600080fd5b348015620000c757600080fd5b50620000f4620000d9366004620012fd565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200011e57600080fd5b50600554620000f4906001600160a01b031681565b6200014a62000144366004620013e6565b620002bf565b005b3480156200015957600080fd5b50620001806200016b366004620012fd565b60026020526000908152604090205460ff1681565b604051901515815260200162000108565b3480156200019e57600080fd5b50620001a962000735565b60405162000108919062001487565b348015620001c557600080fd5b50620001a962000815565b348015620001dd57600080fd5b506200014a620001ef366004620014fd565b620008ee565b3480156200020257600080fd5b50620000f462000214366004620016fd565b62000ad9565b3480156200022757600080fd5b50620000f462000239366004620016fd565b62000b04565b3480156200024c57600080fd5b506200025760045481565b60405190815260200162000108565b3480156200027357600080fd5b506200014a6200028536600462001717565b62000b15565b3480156200029857600080fd5b50620002b0620002aa366004620012fd565b62000c54565b60405162000108919062001746565b60075460ff16620003095760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b60448201526064015b60405180910390fd5b6007805460ff1916905580516004543410156200035d5760405162461bcd60e51b81526020600482015260116024820152704e4f545f454e4f554748545f56414c554560781b604482015260640162000300565b80516001600160a01b0316620003ae5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b604482015260640162000300565b336000908152600360205260409020546001600160a01b031615620004065760405162461bcd60e51b815260206004820152600d60248201526c141493d11550d517d3d5d39151609a1b604482015260640162000300565b6000816020015182608001516200041e919062001810565b82516040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801562000476573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049c919062001832565b50620004a76200126c565b338152602081018390526040516000908290620004c490620012d6565b62000532919060006101008201905060018060a01b038084511683526020840151818151166020850152602081015160408501526040810151606085015260608101516080850152608081015160a085015260a081015160c085015260c081015160e0850152505092915050565b604051809103906000f0801580156200054f573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b03199081166001600160a01b03858116918217909355600680548086019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180543390841681179091556000828152600260209081526040808320805460ff19169098179097559181526003909152849020805490921681179091558751925163095ea7b360e01b8152600481019190915260248101879052929350169063095ea7b3906044016020604051808303816000875af11580156200064e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000674919062001832565b506080840151604051634753a7a160e11b815260048101919091526001600160a01b03821690638ea74f4290602401600060405180830381600087803b158015620006be57600080fd5b505af1158015620006d3573d6000803e3d6000fd5b5050604080513381526001600160a01b03851660208201529081018690527f1ebff2f2b8dfaf965fffb2fddfa8e705e28ca6c7f0966cfc8f8587449774b6e09250606001905060405180910390a150506007805460ff19166001179055505050565b60065460609060008167ffffffffffffffff81111562000759576200075962001324565b60405190808252806020026020018201604052801562000783578160200160208202803683370190505b50905060005b828110156200080e57600060068281548110620007aa57620007aa62001856565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110620007e057620007e062001856565b6001600160a01b039092166020928302919091019091015250620008066001826200186c565b905062000789565b5092915050565b60015460609060008167ffffffffffffffff81111562000839576200083962001324565b60405190808252806020026020018201604052801562000863578160200160208202803683370190505b50905060005b828110156200080e576000600182815481106200088a576200088a62001856565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110620008c057620008c062001856565b6001600160a01b039092166020928302919091019091015250620008e66001826200186c565b905062000869565b60075460ff16620009345760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640162000300565b6007805460ff191690556005546001600160a01b031633146200098a5760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640162000300565b60005b81515181101562000ac857600082600001518281518110620009b357620009b362001856565b602090810291909101810151516001600160a01b0381166000908152600290925260409091205490915060ff1662000a255760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f504f4f4c5f4144445245535360601b604482015260640162000300565b6000819050806001600160a01b031663f8a8f9e78560000151858151811062000a525762000a5262001856565b6020026020010151602001516040518263ffffffff1660e01b815260040162000a7c919062001887565b600060405180830381600087803b15801562000a9757600080fd5b505af115801562000aac573d6000803e3d6000fd5b505050505050808062000abf90620018e5565b9150506200098d565b50506007805460ff19166001179055565b6001818154811062000aea57600080fd5b6000918252602090912001546001600160a01b0316905081565b6006818154811062000aea57600080fd5b600054610100900460ff161580801562000b365750600054600160ff909116105b8062000b525750303b15801562000b52575060005460ff166001145b62000bb75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000300565b6000805460ff19166001179055801562000bdb576000805461ff0019166101001790555b600580546001600160a01b0319166001600160a01b03851617905560048290556007805460ff19166001179055801562000c4f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b62000c876040518060a0016040528060008152602001600081526020016000815260200160008152602001606081525090565b62000cf3604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020830181905280835260408301819052606083015260015467ffffffffffffffff81111562000d295762000d2962001324565b60405190808252806020026020018201604052801562000d9857816020015b62000d846040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908162000d485790505b50608083015260005b600154811015620012655760006001828154811062000dc45762000dc462001856565b60009182526020909120015460405163839e7e8960e01b81526001600160a01b0387811660048301529091169150819063839e7e8990602401602060405180830381865afa15801562000e1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e41919062001903565b8352604051631eb97e0f60e01b81526001600160a01b038681166004830152821690631eb97e0f90602401602060405180830381865afa15801562000e8a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eb0919062001903565b602084015260405163a3d09c1b60e01b81526001600160a01b03868116600483015282169063a3d09c1b90602401602060405180830381865afa15801562000efc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f22919062001903565b6040848101919091525163bdab4a2f60e01b81526001600160a01b03868116600483015282169063bdab4a2f90602401602060405180830381865afa15801562000f70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f96919062001903565b6060840181905260408401516020850151855162000fb591906200186c565b62000fc191906200186c565b62000fcd91906200186c565b6101808401819052156200124f576040840180519062000fed82620018e5565b905250610180830151606085018051620010099083906200186c565b91508181525050806001600160a01b031663ed9fc4ec6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156200104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107591906200191d565b60400151836080018181525050806001600160a01b031663ed9fc4ec6040518163ffffffff1660e01b815260040160e060405180830381865afa158015620010c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010e791906200191d565b6060015160a08401526080830151602084015162001106919062001810565b60c084015260a0830151606084015162001121919062001810565b60e0840181905260c08401516200113991906200186c565b6101008401819052602085018051620011549083906200186c565b905250608083015183516200116a919062001810565b8360c001516200117b91906200186c565b61012084015260a0830151604084015162001197919062001810565b8360e00151620011a891906200186c565b6101408401819052610120840151620011c291906200186c565b610160840181905284518590620011db9083906200186c565b9150818152505060006040518060a00160405280836001600160a01b0316815260200185610120015181526020018560c00151815260200185610140015181526020018560e001518152509050808560800151848151811062001242576200124262001856565b6020026020010181905250505b50806200125c81620018e5565b91505062000da1565b5050919050565b604051806040016040528060006001600160a01b03168152602001620012d16040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b6112cc806200199283390190565b6001600160a01b0381168114620012fa57600080fd5b50565b6000602082840312156200131057600080fd5b81356200131d81620012e4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171562001360576200136062001324565b60405290565b6040516020810167ffffffffffffffff8111828210171562001360576200136062001324565b6040805190810167ffffffffffffffff8111828210171562001360576200136062001324565b604051601f8201601f1916810167ffffffffffffffff81118282101715620013de57620013de62001324565b604052919050565b600060e08284031215620013f957600080fd5b6040516020810181811067ffffffffffffffff821117156200141f576200141f62001324565b6040526200142c6200133a565b83356200143981620012e4565b808252506020840135602082015260408401356040820152606084013560608201526080840135608082015260a084013560a082015260c084013560c0820152808252508091505092915050565b6020808252825182820181905260009190848201906040850190845b81811015620014ca5783516001600160a01b031683529284019291840191600101620014a3565b50909695505050505050565b600067ffffffffffffffff821115620014f357620014f362001324565b5060051b60200190565b6000602082840312156200151057600080fd5b67ffffffffffffffff80833511156200152857600080fd5b602083358401850312156200153c57600080fd5b6200154662001366565b81843585013511156200155857600080fd5b83358401803501601f810186136200156f57600080fd5b620015856200157f8235620014d6565b620013b2565b81358082526020808301929160051b840101881015620015a457600080fd5b602083015b6020843560051b850101811015620016ef578581351115620015ca57600080fd5b803584016040818b03601f19011215620015e357600080fd5b620015ed6200138c565b620015fc6020830135620012e4565b6020820135815287604083013511156200161557600080fd5b6040820135820191508a603f8301126200162e57600080fd5b620016416200157f6020840135620014d6565b602083810135808352908201919060061b84016040018d8111156200166557600080fd5b6040850194505b80851015620016cf576040858f0312156200168657600080fd5b620016906200138c565b6200169c8635620012e4565b85358152620016af6020870135620012e4565b60208601356020820152808452506020830192506040850194506200166c565b5080602084015250508085525050602083019250602081019050620015a9565b508352509095945050505050565b6000602082840312156200171057600080fd5b5035919050565b600080604083850312156200172b57600080fd5b82356200173881620012e4565b946020939093013593505050565b6000602080835260c083018451828501528185015160408181870152808701519150606082818801528088015192506080838189015280890151935060a080818a015285855180885260e08b0191508887019750600096505b80871015620017eb57875180516001600160a01b03168352898101518a84015286810151878401528581015186840152840151848301529688019660019690960195908201906200179f565b509a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156200182d576200182d620017fa565b500290565b6000602082840312156200184557600080fd5b815180151581146200131d57600080fd5b634e487b7160e01b600052603260045260246000fd5b60008219821115620018825762001882620017fa565b500190565b602080825282518282018190526000919060409081850190868401855b82811015620018d857815180516001600160a01b0390811686529087015116868501529284019290850190600101620018a4565b5091979650505050505050565b6000600019821415620018fc57620018fc620017fa565b5060010190565b6000602082840312156200191657600080fd5b5051919050565b600060e082840312156200193057600080fd5b6200193a6200133a565b82516200194781620012e4565b808252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152809150509291505056fe60806040523480156200001157600080fd5b50604051620012cc380380620012cc83398101604081905262000034916200013f565b60208181015160008054336001600160a01b03199182161790915592516001805485166001600160a01b03928316179055815160068054909516911617909255810151600755604081015160085560608101516009556080810151600a5560a0810151600b5560c00151600c55601280546201000062ffffff19909116179055620001e7565b604080519081016001600160401b0381118282101715620000eb57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160e081016001600160401b0381118282101715620000eb57634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200013a57600080fd5b919050565b60008183036101008112156200015457600080fd5b6200015e620000ba565b620001698462000122565b815260e0601f19830112156200017e57600080fd5b62000188620000f1565b9150620001986020850162000122565b825260408401516020830152606084015160408301526080840151606083015260a0840151608083015260c084015160a083015260e084015160c0830152816020820152809250505092915050565b6110d580620001f76000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c8063a8046609116100ad578063c9a0b40611610071578063c9a0b406146102d5578063ebd238fb146102dd578063ed9fc4ec14610347578063f1b3f86f146103a9578063f8a8f9e7146103b157600080fd5b8063a804660914610264578063b610fb6414610287578063b782cc491461028f578063bdab4a2f146102a2578063c45a0155146102c257600080fd5b806350bc9995116100f457806350bc9995146101ed578063839e7e89146101fa5780638ea74f421461021d5780639361076a14610232578063a3d09c1b1461024457600080fd5b8062ce8e3e146101305780630255fa1e1461014e5780631bd78748146101815780631eb97e0f146101ac578063365b98b2146101da575b600080fd5b6101386103c4565b6040516101459190610de9565b60405180910390f35b61017161015c366004610e52565b60056020526000908152604090205460ff1681565b6040519015158152602001610145565b61019461018f366004610e74565b610496565b6040516001600160a01b039091168152602001610145565b6101cc6101ba366004610e52565b60106020526000908152604090205481565b604051908152602001610145565b6101946101e8366004610e74565b6104c0565b6012546101719060ff1681565b6101cc610208366004610e52565b600e6020526000908152604090206001015481565b61023061022b366004610e74565b6104d0565b005b60125461017190610100900460ff1681565b6101cc610252366004610e52565b600f6020526000908152604090205481565b610171610272366004610e52565b60036020526000908152604090205460ff1681565b610230610636565b600154610194906001600160a01b031681565b6101cc6102b0366004610e52565b60116020526000908152604090205481565b600054610194906001600160a01b031681565b610230610806565b600654600754600854600954600a54600b54600c54610308966001600160a01b031695949392919087565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610145565b61034f6109d0565b604051610145919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0828101519082015260c0918201519181019190915260e00190565b610138610a67565b6102306103bf366004610efd565b610b32565b60045460609060008167ffffffffffffffff8111156103e5576103e5610e8d565b60405190808252806020026020018201604052801561040e578160200160208202803683370190505b50905060005b8281101561048f5760006004828154811061043157610431610fd9565b9060005260206000200160009054906101000a90046001600160a01b031690508083838151811061046457610464610fd9565b6001600160a01b039092166020928302919091019091015250610488600182611005565b9050610414565b5092915050565b600281815481106104a657600080fd5b6000918252602090912001546001600160a01b0316905081565b600481815481106104a657600080fd5b6000546001600160a01b03163314806104f357506001546001600160a01b031633145b6105345760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b60448201526064015b60405180910390fd5b600754600090610544908361101d565b6006546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061103c565b506000546001600160a01b031633146105ee5781600660040160008282546105e89190611005565b90915550505b600a5460408051848152602081019290925281018290527f6213dc923ba9cebd39b57f99bbecb140a32b0af21fa6c41feee100e40b9179289060600160405180910390a15050565b60125462010000900460ff166106805760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161052b565b6012805462ff000019811690915560ff16156106ae5760405162461bcd60e51b815260040161052b9061105e565b336000908152600f6020526040902054806106fc5760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161052b565b336000908152600f60209081526040808320839055601190915281208054839290610728908490611005565b909155505060095460009061073d908361101d565b60065460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b3919061103c565b506001604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a350506012805462ff0000191662010000179055565b60125462010000900460ff166108505760405162461bcd60e51b815260206004820152600f60248201526e1053149150511657d1539511549151608a1b604482015260640161052b565b6012805462ff000019811690915560ff161561087e5760405162461bcd60e51b815260040161052b9061105e565b336000908152600e602090815260408083206001810180549085905560109093529083208054919383926108b3908490611005565b9091555050806108f65760405162461bcd60e51b815260206004820152600e60248201526d2727afaa2920a729a0a1aa24a7a760911b604482015260640161052b565b600854600090610906908361101d565b60065460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c919061103c565b506000604080518481526020810184905233917f59e315fd5d58892f063ba6918d15beaa1321d25d324b3388bf142e4b6e48538d910160405180910390a350506012805462ff000019166201000017905550565b610a196040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160e0810182526006546001600160a01b031681526007546020820152600854918101919091526009546060820152600a546080820152600b5460a0820152600c5460c082015290565b60025460609060008167ffffffffffffffff811115610a8857610a88610e8d565b604051908082528060200260200182016040528015610ab1578160200160208202803683370190505b50905060005b8281101561048f57600060028281548110610ad457610ad4610fd9565b9060005260206000200160009054906101000a90046001600160a01b0316905080838381518110610b0757610b07610fd9565b6001600160a01b039092166020928302919091019091015250610b2b600182611005565b9050610ab7565b601254610100900460ff1615610b5a5760405162461bcd60e51b815260040161052b9061105e565b6000546001600160a01b03163314610ba45760405162461bcd60e51b815260206004820152600d60248201526c1050d0d154d4d7d11153925151609a1b604482015260640161052b565b60005b8151811015610de5576000828281518110610bc457610bc4610fd9565b60200260200101516000015190506000838381518110610be657610be6610fd9565b6020908102919091018101518101516001600160a01b038085166000908152600e84526040808220600d8652818320938516835292909452929092205490925060ff1680610c82576001600160a01b038085166000908152600d602090815260408083209387168084529382528220805460ff191660019081179091558554908101865585835291200180546001600160a01b03191690911790555b600182018054906000610c9483611084565b90915550506001600160a01b0383166000908152600f60205260408120805491610cbd83611084565b90915550506001600160a01b03841660009081526003602052604090205460ff16610d48576001600160a01b0384166000818152600360205260408120805460ff191660019081179091556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790555b6001600160a01b03831660009081526005602052604090205460ff16610dce576001600160a01b0383166000818152600560205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191690911790555b505050508080610ddd90611084565b915050610ba7565b5050565b6020808252825182820181905260009190848201906040850190845b81811015610e2a5783516001600160a01b031683529284019291840191600101610e05565b50909695505050505050565b80356001600160a01b0381168114610e4d57600080fd5b919050565b600060208284031215610e6457600080fd5b610e6d82610e36565b9392505050565b600060208284031215610e8657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610ec657610ec6610e8d565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610ef557610ef5610e8d565b604052919050565b60006020808385031215610f1057600080fd5b823567ffffffffffffffff80821115610f2857600080fd5b818501915085601f830112610f3c57600080fd5b813581811115610f4e57610f4e610e8d565b610f5c848260051b01610ecc565b818152848101925060069190911b830184019087821115610f7c57600080fd5b928401925b81841015610fce5760408489031215610f9a5760008081fd5b610fa2610ea3565b610fab85610e36565b8152610fb8868601610e36565b8187015283526040939093019291840191610f81565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561101857611018610fef565b500190565b600081600019048311821515161561103757611037610fef565b500290565b60006020828403121561104e57600080fd5b81518015158114610e6d57600080fd5b6020808252600c908201526b10d310525357d4105554d15160a21b604082015260600190565b600060001982141561109857611098610fef565b506001019056fea2646970667358221220bc449b1f3e91b0859630fe6fe07de8152a6a8154bd616afaab9415ee6836471664736f6c634300080b0033a26469706673582212207ae3b751657d290551c3742b84cb30999749b8288e48cee92ec4a6f62101573064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_notEntered": {
        "details": "Guard variable for re-entrancy checks"
      },
      "poolCreationFee": {
        "details": "Should be multiplied by unit of ether(1e18)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreateIncentivePool(address,address,uint256)": {
        "notice": "Emitted when leftTransactionNum is added"
      }
    },
    "kind": "user",
    "methods": {
      "deployerToIncentivePool(address)": {
        "notice": "Mapping of deployer address to pool address"
      },
      "deployers(uint256)": {
        "notice": "Addresses of the deployers"
      },
      "incentivePools(uint256)": {
        "notice": "List of product incentive pools"
      },
      "isValidPool(address)": {
        "notice": "Mapping of pool address to validness(is it deployed?)"
      },
      "masterAdmin()": {
        "notice": "Address of the master admin of split"
      },
      "poolCreationFee()": {
        "notice": "Pool creation fee paid by contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1634,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1637,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 522,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "incentivePools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IncentivePool)506)dyn_storage"
      },
      {
        "astId": 527,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "isValidPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 532,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "deployerToIncentivePool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 535,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "poolCreationFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 538,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "masterAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 542,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "deployers",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 545,
        "contract": "src/IncentivePoolFactory.sol:IncentivePoolFactory",
        "label": "_notEntered",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IncentivePool)506)dyn_storage": {
        "base": "t_contract(IncentivePool)506",
        "encoding": "dynamic_array",
        "label": "contract IncentivePool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IncentivePool)506": {
        "encoding": "inplace",
        "label": "contract IncentivePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}